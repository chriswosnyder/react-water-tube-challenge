{"version":3,"sources":["components/Tube.js","components/BathTub.js","App.js","reportWebVitals.js","index.js"],"names":["Tube","actualHeight","level","style","backgroundColor","height","BathTub","useState","increase","setIncrease","decrease","setDecrease","setLevel","useEffect","timer","setTimeout","console","log","clearTimeout","className","fontSize","color","cursor","onClick","e","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8RAYeA,EAZF,SAAC,GAAe,IACrBC,EAAe,GADK,EAAZC,MAEd,OACE,qBACEC,MAAO,CACLC,gBAAiB,OACjBC,OAAO,GAAD,OAAKJ,EAAL,U,kCCuDCK,EAvDC,WACd,MAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAgCF,oBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA0BJ,mBAAS,GAAnC,mBAAOL,EAAP,KAAcU,EAAd,KACAC,qBAAU,WACR,IAAMC,EAAQC,YAAW,WACnBP,IACFI,EAASV,EAAQ,GACjBc,QAAQC,IAAI,gCAEb,OACET,GAAYN,GAAS,IAAGgB,aAAaJ,KACzC,CAACN,EAAUN,IAEdW,qBAAU,WACR,IAAMC,EAAQC,YAAW,WACnBL,GAAYR,EAAQ,IACtBU,EAASV,EAAQ,GACjBc,QAAQC,IAAI,gCAEb,OACEP,GAAYR,GAAS,IAAGgB,aAAaJ,KACzC,CAACJ,EAAUR,IAYd,OACE,gCACE,qBAAKiB,UAAU,qBAAf,SACE,cAAC,EAAD,CAAMjB,MAAOA,MAEf,sBAAMiB,UAAU,cAChB,sBAAKA,UAAU,UAAf,UACE,cAAC,IAAD,CACEhB,MAAO,CAAEiB,SAAU,GAAIC,MAAO,QAASC,OAAQ,WAC/CC,QAnBc,SAACC,GACrBb,GAAY,GACZF,GAAY,GACZO,QAAQC,IAAI,eAkBR,cAAC,IAAD,CACEd,MAAO,CAAEiB,SAAU,GAAIC,MAAO,MAAOC,OAAQ,WAC7CC,QAlBc,SAACC,GACrBf,GAAY,GACZE,GAAY,GACZK,QAAQC,IAAI,eAiBR,uBAAME,UAAU,gBAAhB,UAAyC,GAARjB,EAAjC,eC1COuB,MAVf,WACE,OACE,qBAAKN,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,EAAD,SCKOO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.28f6e302.chunk.js","sourcesContent":["const Tube = ({ level }) => {\n  const actualHeight = 80 * level;\n  return (\n    <div\n      style={{\n        backgroundColor: \"blue\",\n        height: `${actualHeight}px`,\n      }}\n    ></div>\n  );\n};\n\nexport default Tube;\n","import \"./BathTub.css\";\nimport Tube from \"./Tube\";\nimport ArrowDropUpIcon from \"@mui/icons-material/ArrowDropUp\";\nimport ArrowDropDownIcon from \"@mui/icons-material/ArrowDropDown\";\nimport { useState, useEffect } from \"react\";\n\nconst BathTub = () => {\n  const [increase, setIncrease] = useState(false);\n  const [decrease, setDecrease] = useState(false);\n  const [level, setLevel] = useState(0);\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      if (increase) {\n        setLevel(level + 1);\n        console.log(\"Increase every 2 seconds!\");\n      }\n    }, 2000);\n    if (!increase || level >= 5) clearTimeout(timer);\n  }, [increase, level]);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      if (decrease && level > 0) {\n        setLevel(level - 1);\n        console.log(\"Decrease every 2 seconds!\");\n      }\n    }, 2000);\n    if (!decrease || level <= 0) clearTimeout(timer);\n  }, [decrease, level]);\n\n  const increaseWater = (e) => {\n    setDecrease(false);\n    setIncrease(true);\n    console.log(\"Increase\");\n  };\n  const decreaseWater = (e) => {\n    setIncrease(false);\n    setDecrease(true);\n    console.log(\"Decrease\");\n  };\n  return (\n    <div>\n      <div className=\"bath-tub-container\">\n        <Tube level={level} />\n      </div>\n      <span className=\"up-button\"></span>\n      <div className=\"buttons\">\n        <ArrowDropUpIcon\n          style={{ fontSize: 60, color: \"green\", cursor: \"pointer\" }}\n          onClick={increaseWater}\n        />\n        <ArrowDropDownIcon\n          style={{ fontSize: 60, color: \"red\", cursor: \"pointer\" }}\n          onClick={decreaseWater}\n        />\n        <span className=\"level-counter\">{level * 20} %</span>\n      </div>\n    </div>\n  );\n};\n\nexport default BathTub;\n","import \"./App.css\";\nimport BathTub from \"./components/BathTub\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <BathTub />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}